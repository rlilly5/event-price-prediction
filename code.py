# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1urdK6tbVGqTc0vxDi-YxLJTf6QS6Y8JU
"""

# import statemets
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

data = pd.read_csv('/Users/kausikamanivannan/DSBA6156/random_forest/ProcessedTicketData.csv')
print(f"Features shape: {data.shape}")

# Convert 'date' column to string, take first 10 characters, and convert to datetime
data['date'] = data['date'].astype(str).str[:10]
data['date'] = pd.to_datetime(data['date'])

print(data['date'].head(10))  # first 10 rows of the date column

# Target variable
target = 'max_price'

# Drop the target column to get only the features
features = data.drop(columns=['event_id', 'max_price'])

# Dictionary to store encoders for each column
encoders = {}

# Encode categorical columns
for col in ['artist', 'venue', 'city', 'state', 'ticket_vendor']:
    if col in features:
        encoder = LabelEncoder()
        features[col] = encoder.fit_transform(data[col])
        encoders[col] = encoder

print(f"Features shape: {features.shape}")

print(features.head())

# Splitting the data in test and train datasets

X = features
y = data[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # 20% train data, 20% test data

print(f"Training set size: {X_train.shape}")
print(f"Testing set size: {X_test.shape}")

# Extract year, month, day, and day_of_week from the date column for train and test

if 'date' in X_train.columns:
    X_train['year'] = X_train['date'].dt.year
    X_train['month'] = X_train['date'].dt.month
    X_train['day'] = X_train['date'].dt.day
    X_train['day_of_week'] = X_train['date'].dt.dayofweek
    X_train['days_since_epoch'] = (X_train['date'] - pd.Timestamp('1970-01-01')).dt.days

    X_test['year'] = X_test['date'].dt.year
    X_test['month'] = X_test['date'].dt.month
    X_test['day'] = X_test['date'].dt.day
    X_test['day_of_week'] = X_test['date'].dt.dayofweek
    X_test['days_since_epoch'] = (X_test['date'] - pd.Timestamp('1970-01-01')).dt.days

    # Drop the original date column
    X_train = X_train.drop(columns=['date'])
    X_test = X_test.drop(columns=['date'])

# train random forest model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate evaluation metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R^2 Score: {r2}")

def predict_ticket_price(artist_name, venue_name):
    if artist_name not in encoders['artist'].classes_:
        print(f"Artist '{artist_name}' not found in training data.")
        return

    if venue_name not in encoders['venue'].classes_:
        print(f"Venue '{venue_name}' not found in training data.")
        return

    artist_encoded = encoders['artist'].transform([artist_name])[0]
    venue_encoded = encoders['venue'].transform([venue_name])[0]

    input_sample = X_train.iloc[0].copy()
    input_sample['artist'] = artist_encoded
    input_sample['venue'] = venue_encoded

    for col in ['year', 'month', 'day', 'day_of_week', 'days_since_epoch']:
        if col in input_sample:
            input_sample[col] = X_train[col].mean()

    input_sample = input_sample.values.reshape(1, -1)

    predicted_price = model.predict(input_sample)
    print(f"Predicted ticket price: ${predicted_price[0]:.2f}")

example_artist = "Justin Bieber"  # Replace with actual artist name
example_venue = "Terminal West"    # Replace with actual venue name
predict_ticket_price(example_artist, example_venue)

"""**Things to fix:**
- 'date' should be another parameter for the predictor should be time of purchase
- change the example_artist and example_venue to be user input


This is only the update, I can change a lot of the model later this week
"""